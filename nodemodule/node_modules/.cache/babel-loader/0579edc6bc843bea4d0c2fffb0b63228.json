{"ast":null,"code":"var _jsxFileName = \"/home/pravesh/Desktop/Scratch/src/components/MidArea.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addList } from \"../redux/midarea/actions\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { getComponent } from \"./getComponents\";\nimport { createStyles, makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport { purple } from \"@material-ui/core/colors\";\nimport Paper from \"@material-ui/core/Paper\"; // Styling for MaterialUI Components\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => createStyles({\n  button: {\n    margin: 0\n  }\n})); // Customized button for Running Lists\n\nconst RunButton = withStyles(theme => ({\n  root: {\n    color: theme.palette.getContrastText(purple[500]),\n    backgroundColor: purple[500],\n    fontSize: \"13px\",\n    \"&:hover\": {\n      backgroundColor: purple[700]\n    }\n  }\n}))(Button); // Mid Area Component\n\nfunction MidArea({\n  area_list,\n  add_list,\n  event_values\n}) {\n  _s();\n\n  const classes = useStyles();\n\n  const eventFire = (el, etype) => {\n    if (el && el.fireEvent) {\n      el.fireEvent(\"on\" + etype);\n    } else if (el) {\n      var evObj = document.createEvent(\"Events\");\n      evObj.initEvent(etype, true, false);\n      el.dispatchEvent(evObj);\n    }\n  }; // Handle Running the list\n\n\n  const handleClick = (arr, id) => {\n    if (arr.length === 0) return;\n    let i = 0;\n    let repeat = 1;\n    let str1 = `comp${arr[i]}-${id}-${i}`; // Handle Wait at first index\n\n    if (arr[i] === \"WAIT\") {\n      let str2 = `comp${arr[i]}-${id}-${i}`;\n      let last_time = new Date().getTime();\n      let curr_time = new Date().getTime();\n\n      while ((curr_time - last_time) / 1000 < event_values.wait[str2] - 2) {\n        curr_time = new Date().getTime();\n      }\n    } // Handle Repeat at first index\n    else if (arr[i] !== \"REPEAT\") {\n      eventFire(document.getElementById(str1), \"click\");\n    } else {\n      repeat = event_values.repeat[str1] + 1;\n    }\n\n    i++;\n    /* Each function execution takes 2 seconds */\n\n    var cnt = setInterval(() => {\n      if (i === arr.length) {\n        clearInterval(cnt);\n      } // Handle Wait\n\n\n      if (arr[i] === \"WAIT\") {\n        let str2 = `comp${arr[i]}-${id}-${i}`;\n        let last_time = new Date().getTime();\n        let curr_time = new Date().getTime();\n\n        while ((curr_time - last_time) / 1000 < event_values.wait[str2] - 2) {\n          curr_time = new Date().getTime();\n        }\n\n        i++;\n      } // Handle Repeat Component at current index\n      else if (arr[i] === \"REPEAT\") {\n        let str2 = `comp${arr[i]}-${id}-${i}`;\n        repeat = repeat * (event_values.repeat[str2] + 1);\n        i++;\n      } // If Repeat component is at previous index\n      else if (arr[i - 1] === \"REPEAT\" && repeat > 2) {\n        let str2 = `comp${arr[i]}-${id}-${i}`;\n        eventFire(document.getElementById(str2), \"click\");\n        repeat--;\n      } else {\n        let str2 = `comp${arr[i]}-${id}-${i}`;\n        eventFire(document.getElementById(str2), \"click\");\n        i++;\n      }\n    }, 2000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex-1 h-full overflow-auto p-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"font-bold mb-5 text-center border border-2 rounded text-white bg-green-400 p-2 w-auto\",\n        children: \"Mid Area\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          className: classes.button,\n          startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 24\n          }, this),\n          onClick: () => add_list(),\n          children: [\"Add List\", \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-flow-col\",\n      children: area_list.midAreaLists.map(l => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-60\",\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            elevation: 3,\n            className: \"p-4\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-52 border border-2 border-gray-300 p-2\",\n              children: /*#__PURE__*/_jsxDEV(Droppable, {\n                droppableId: l.id,\n                type: \"COMPONENTS\",\n                children: provided => {\n                  return /*#__PURE__*/_jsxDEV(\"ul\", {\n                    className: `${l.id} w-48 h-full`,\n                    ...provided.droppableProps,\n                    ref: provided.innerRef,\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"text-center mx-auto my-2 mb-4\",\n                      children: /*#__PURE__*/_jsxDEV(RunButton, {\n                        variant: \"contained\",\n                        className: classes.button,\n                        startIcon: /*#__PURE__*/_jsxDEV(PlayArrowIcon, {}, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 147,\n                          columnNumber: 42\n                        }, this),\n                        onClick: () => handleClick(l.comps, l.id),\n                        children: [\"Run\", \" \"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 144,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 143,\n                      columnNumber: 27\n                    }, this), l.comps && l.comps.map((x, i) => {\n                      let str = `${x}`;\n                      let component_id = `comp${str}-${l.id}-${i}`;\n                      return /*#__PURE__*/_jsxDEV(Draggable, {\n                        draggableId: `${str}-${l.id}-${i}`,\n                        index: i,\n                        children: provided => /*#__PURE__*/_jsxDEV(\"li\", {\n                          ref: provided.innerRef,\n                          ...provided.draggableProps,\n                          ...provided.dragHandleProps,\n                          children: [getComponent(str, component_id), provided.placeholder]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 166,\n                          columnNumber: 37\n                        }, this)\n                      }, `${str}-${l.id}-${i}`, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 160,\n                        columnNumber: 33\n                      }, this);\n                    }), provided.placeholder]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 138,\n                    columnNumber: 25\n                  }, this);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 135,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this)\n        }, l.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n} // mapping state to props\n\n\n_s(MidArea, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = MidArea;\n\nconst mapStateToProps = state => {\n  return {\n    area_list: state.list,\n    event_values: state.event\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    add_list: () => dispatch(addList())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MidArea);\n\nvar _c;\n\n$RefreshReg$(_c, \"MidArea\");","map":{"version":3,"sources":["/home/pravesh/Desktop/Scratch/src/components/MidArea.js"],"names":["React","connect","addList","Droppable","Draggable","getComponent","createStyles","makeStyles","withStyles","Button","AddIcon","PlayArrowIcon","purple","Paper","useStyles","button","margin","RunButton","theme","root","color","palette","getContrastText","backgroundColor","fontSize","MidArea","area_list","add_list","event_values","classes","eventFire","el","etype","fireEvent","evObj","document","createEvent","initEvent","dispatchEvent","handleClick","arr","id","length","i","repeat","str1","str2","last_time","Date","getTime","curr_time","wait","getElementById","cnt","setInterval","clearInterval","midAreaLists","map","l","provided","droppableProps","innerRef","comps","x","str","component_id","draggableProps","dragHandleProps","placeholder","mapStateToProps","state","list","event","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addList } from \"../redux/midarea/actions\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { getComponent } from \"./getComponents\";\nimport { createStyles, makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\nimport { purple } from \"@material-ui/core/colors\";\nimport Paper from \"@material-ui/core/Paper\";\n\n// Styling for MaterialUI Components\nconst useStyles = makeStyles(() =>\n  createStyles({\n    button: {\n      margin: 0,\n    },\n  })\n);\n\n// Customized button for Running Lists\nconst RunButton = withStyles((theme) => ({\n  root: {\n    color: theme.palette.getContrastText(purple[500]),\n    backgroundColor: purple[500],\n    fontSize: \"13px\",\n    \"&:hover\": {\n      backgroundColor: purple[700],\n    },\n  },\n}))(Button);\n\n// Mid Area Component\nfunction MidArea({ area_list, add_list, event_values }) {\n  const classes = useStyles();\n  const eventFire = (el, etype) => {\n    if (el && el.fireEvent) {\n      el.fireEvent(\"on\" + etype);\n    } else if (el) {\n      var evObj = document.createEvent(\"Events\");\n      evObj.initEvent(etype, true, false);\n      el.dispatchEvent(evObj);\n    }\n  };\n\n  // Handle Running the list\n  const handleClick = (arr, id) => {\n    if (arr.length === 0) return;\n    let i = 0;\n\n    let repeat = 1;\n\n    let str1 = `comp${arr[i]}-${id}-${i}`;\n\n    // Handle Wait at first index\n    if (arr[i] === \"WAIT\") {\n      let str2 = `comp${arr[i]}-${id}-${i}`;\n      let last_time = new Date().getTime();\n      let curr_time = new Date().getTime();\n\n      while ((curr_time - last_time) / 1000 < event_values.wait[str2] - 2) {\n        curr_time = new Date().getTime();\n      }\n    }\n\n    // Handle Repeat at first index\n    else if (arr[i] !== \"REPEAT\") {\n      eventFire(document.getElementById(str1), \"click\");\n    } else {\n      repeat = event_values.repeat[str1] + 1;\n    }\n    i++;\n\n    /* Each function execution takes 2 seconds */\n    var cnt = setInterval(() => {\n      if (i === arr.length) {\n        clearInterval(cnt);\n      }\n\n      // Handle Wait\n      if (arr[i] === \"WAIT\") {\n        let str2 = `comp${arr[i]}-${id}-${i}`;\n        let last_time = new Date().getTime();\n        let curr_time = new Date().getTime();\n\n        while ((curr_time - last_time) / 1000 < event_values.wait[str2] - 2) {\n          curr_time = new Date().getTime();\n        }\n        i++;\n      }\n      // Handle Repeat Component at current index\n      else if (arr[i] === \"REPEAT\") {\n        let str2 = `comp${arr[i]}-${id}-${i}`;\n        repeat = repeat * (event_values.repeat[str2] + 1);\n        i++;\n      }\n      // If Repeat component is at previous index\n      else if (arr[i - 1] === \"REPEAT\" && repeat > 2) {\n        let str2 = `comp${arr[i]}-${id}-${i}`;\n        eventFire(document.getElementById(str2), \"click\");\n        repeat--;\n      } else {\n        let str2 = `comp${arr[i]}-${id}-${i}`;\n        eventFire(document.getElementById(str2), \"click\");\n        i++;\n      }\n    }, 2000);\n  };\n  return (\n    <div className=\"flex-1 h-full overflow-auto p-3\">\n      <div className=\"flex justify-between\">\n        <div className=\"font-bold mb-5 text-center border border-2 rounded text-white bg-green-400 p-2 w-auto\">\n          Mid Area\n        </div>\n\n        <div>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.button}\n            startIcon={<AddIcon />}\n            onClick={() => add_list()}\n          >\n            Add List{\" \"}\n          </Button>\n        </div>\n      </div>\n      <div className=\"grid grid-flow-col\">\n        {area_list.midAreaLists.map((l) => {\n          return (\n            <div className=\"w-60\" key={l.id}>\n              <Paper elevation={3} className=\"p-4\">\n                <div className=\"w-52 border border-2 border-gray-300 p-2\">\n                  <Droppable droppableId={l.id} type=\"COMPONENTS\">\n                    {(provided) => {\n                      return (\n                        <ul\n                          className={`${l.id} w-48 h-full`}\n                          {...provided.droppableProps}\n                          ref={provided.innerRef}\n                        >\n                          <div className=\"text-center mx-auto my-2 mb-4\">\n                            <RunButton\n                              variant=\"contained\"\n                              className={classes.button}\n                              startIcon={<PlayArrowIcon />}\n                              onClick={() => handleClick(l.comps, l.id)}\n                            >\n                              Run{\" \"}\n                            </RunButton>\n                          </div>\n\n                          {l.comps &&\n                            l.comps.map((x, i) => {\n                              let str = `${x}`;\n                              let component_id = `comp${str}-${l.id}-${i}`;\n\n                              return (\n                                <Draggable\n                                  key={`${str}-${l.id}-${i}`}\n                                  draggableId={`${str}-${l.id}-${i}`}\n                                  index={i}\n                                >\n                                  {(provided) => (\n                                    <li\n                                      ref={provided.innerRef}\n                                      {...provided.draggableProps}\n                                      {...provided.dragHandleProps}\n                                    >\n                                      {getComponent(str, component_id)}\n                                      {provided.placeholder}\n                                    </li>\n                                  )}\n                                </Draggable>\n                              );\n                            })}\n                          {provided.placeholder}\n                        </ul>\n                      );\n                    }}\n                  </Droppable>\n                </div>\n              </Paper>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\n// mapping state to props\nconst mapStateToProps = (state) => {\n  return {\n    area_list: state.list,\n    event_values: state.event,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    add_list: () => dispatch(addList()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MidArea);\n"]},"metadata":{},"sourceType":"module"}